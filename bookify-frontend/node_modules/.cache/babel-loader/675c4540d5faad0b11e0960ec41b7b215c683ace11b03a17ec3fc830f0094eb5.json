{"ast":null,"code":"// import React, { useEffect, useState, useMemo } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import styled, { keyframes } from \"styled-components\";\n// import axios from \"axios\";\n// import { DateRange } from \"react-date-range\";\n// import \"react-date-range/dist/styles.css\";\n// import \"react-date-range/dist/theme/default.css\";\n\n// /* ------------------------------------------------------------------\n//    CountryPage – builds bundles purely on the *existing* listings APIs\n//    ------------------------------------------------------------------\n//    • GET /api/listings/hotels   → [{ id, country, city, pricePerNight,  photoUrl, availableFrom, availableTo }]\n//    • GET /api/listings/flights  → [{ id, country, price, departDate, returnDate, airline, photoUrl }]\n//    • GET /api/listings/events   → [{ id, country, price, eventDate, title, photoUrl }]\n\n//    The page:\n//    1.  fetches the 3 lists once\n//    2.  filters them by date‑range & country in the browser\n//    3.  cross‑joins into simple “packages” (1 flight + 1 hotel + 1 event)\n//        – nights = (#days in range)\n//        – totalPrice = hotel.pricePerNight*nights + flight.price + event.price\n//    4.  sorts by totalPrice and shows the cheapest 12.\n\n//    (For real‑world usage you’d push the heavy logic server‑side, but this\n//     meets your “use existing APIs only” constraint.)\n//    ------------------------------------------------------------------ */\n\n// /* style helpers */\n// const fadeIn = keyframes`from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}`;\n// const Hero   = styled.section`background:url(${p=>p.img}) center/cover;height:240px;color:#fff;\n//   display:flex;align-items:center;justify-content:center;font-size:2.2rem;font-weight:800;`;\n// const Filters = styled.div`background:#fff;padding:1rem 1.5rem;box-shadow:0 4px 12px rgba(0,0,0,.12);\n//   border-radius:14px;display:flex;gap:2rem;align-items:flex-start;width:90%;max-width:980px;\n//   margin:-32px auto 2rem;animation:${fadeIn}.4s ease-out;`;\n// const Grid   = styled.section`display:grid;gap:2rem;padding:0 2rem 3rem;max-width:1300px;margin:0 auto;\n//   grid-template-columns:repeat(auto-fit,minmax(280px,1fr));animation:${fadeIn}.5s ease-out;`;\n// const Card   = styled.div`border-radius:16px;overflow:hidden;box-shadow:0 6px 16px rgba(0,0,0,.12);background:#fff;`; \n// const Img    = styled.img`width:100%;height:150px;object-fit:cover;`;\n// const CBody  = styled.div`padding:1rem;display:flex;flex-direction:column;gap:.4rem;`;\n// const Price  = styled.span`font-weight:700;font-size:1.05rem;color:#175dff;`;\n\n// /* helpers */\n// const textDark = \"#003b70\";\n// const diffDays = (a,b)=>Math.max(1, Math.round((b-a)/(1000*3600*24)));\n\n// export default function CountryPage(){\n//   const { code }=useParams();\n//   const [range,setRange]=useState([{startDate:new Date(),endDate:new Date(),key:\"sel\"}]);\n//   const [hotels,setHotels]=useState([]);   // raw API arrays\n//   const [flights,setFlights]=useState([]);\n//   const [events,setEvents]=useState([]);\n\n//   /* load listings once */\n//   useEffect(()=>{\n//     const load=async()=>{\n//       const [h,f,e]=await Promise.all([\n//         axios.get(\"/api/listings/hotels\"),\n//         axios.get(\"/api/listings/flights\"),\n//         axios.get(\"/api/listings/events\")\n//       ]);\n//       setHotels(h.data);setFlights(f.data);setEvents(e.data);\n//     };\n//     load();\n//   },[]);\n\n//   /* memo‑create packages every time data or range changes */\n//   const packages = useMemo(()=>{\n//     if(!hotels.length||!flights.length||!events.length) return [];\n//     const from=range[0].startDate, to=range[0].endDate;\n//     const nights = diffDays(from,to);\n\n//     const hFilt = hotels.filter(h=>h.country===code && new Date(h.availableFrom)<=from && new Date(h.availableTo)>=to);\n//     const fFilt = flights.filter(f=>f.country===code && new Date(f.departDate)>=from && new Date(f.returnDate)<=to);\n//     const eFilt = events.filter(ev=>ev.country===code && new Date(ev.eventDate)>=from && new Date(ev.eventDate)<=to);\n\n//     const out=[];\n//     hFilt.forEach(h=>{\n//       fFilt.forEach(f=>{\n//         eFilt.forEach(ev=>{\n//           out.push({\n//             id:`${h.id}-${f.id}-${ev.id}`,\n//             hotel:h,flight:f,event:ev,\n//             nights,total:nights*h.pricePerNight + f.price + ev.price,\n//             thumb:h.photoUrl||f.photoUrl||ev.photoUrl||\"https://via.placeholder.com/400x250\"\n//           });\n//         });\n//       });\n//     });\n//     return out.sort((a,b)=>a.total-b.total).slice(0,12);\n//   },[code,hotels,flights,events,range]);\n\n//   /* hero fallback photo */\n//   const heroImg=`https://images.unsplash.com/1600x500/?${code}&auto=format`; // you can override\n\n//   return(\n//     <>\n//       <Hero img={heroImg}>{code}</Hero>\n\n//       <Filters>\n//         <div>\n//           <strong>Dates</strong>\n//           <DateRange ranges={range}\n//             onChange={i=>setRange([i.selection])}\n//             moveRangeOnFirstSelection={false}\n//             rangeColors={[\"#175dff\"]} editableDateInputs\n//           />\n//         </div>\n//         {/* space for future price slider / category checkboxes */}\n//       </Filters>\n\n//       <Grid>\n//         {packages.map(p=>(\n//           <Card key={p.id}>\n//             <Img src={p.thumb} alt=\"pkg\"/>\n//             <CBody>\n//               <div><strong>{p.hotel.name}</strong> + flight + event</div>\n//               <div>{p.nights} nights · {p.hotel.city}</div>\n//               <div>Flight: {p.flight.airline}</div>\n//               <div>Event: {p.event.title}</div>\n//               <Price>€ {p.total.toFixed(0)}</Price>\n//             </CBody>\n//           </Card>\n//         ))}\n//         {!packages.length && <p style={{gridColumn:\"1/-1\",color:textDark}}>No matching packages. Try different dates.</p>}\n//       </Grid>\n//     </>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Calina/Desktop/ANUL3/sem2/SD/proiect/bookify-frontend/src/pages/CountryPage.jsx"],"sourcesContent":["// import React, { useEffect, useState, useMemo } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import styled, { keyframes } from \"styled-components\";\r\n// import axios from \"axios\";\r\n// import { DateRange } from \"react-date-range\";\r\n// import \"react-date-range/dist/styles.css\";\r\n// import \"react-date-range/dist/theme/default.css\";\r\n\r\n// /* ------------------------------------------------------------------\r\n//    CountryPage – builds bundles purely on the *existing* listings APIs\r\n//    ------------------------------------------------------------------\r\n//    • GET /api/listings/hotels   → [{ id, country, city, pricePerNight,  photoUrl, availableFrom, availableTo }]\r\n//    • GET /api/listings/flights  → [{ id, country, price, departDate, returnDate, airline, photoUrl }]\r\n//    • GET /api/listings/events   → [{ id, country, price, eventDate, title, photoUrl }]\r\n\r\n//    The page:\r\n//    1.  fetches the 3 lists once\r\n//    2.  filters them by date‑range & country in the browser\r\n//    3.  cross‑joins into simple “packages” (1 flight + 1 hotel + 1 event)\r\n//        – nights = (#days in range)\r\n//        – totalPrice = hotel.pricePerNight*nights + flight.price + event.price\r\n//    4.  sorts by totalPrice and shows the cheapest 12.\r\n\r\n//    (For real‑world usage you’d push the heavy logic server‑side, but this\r\n//     meets your “use existing APIs only” constraint.)\r\n//    ------------------------------------------------------------------ */\r\n\r\n// /* style helpers */\r\n// const fadeIn = keyframes`from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}`;\r\n// const Hero   = styled.section`background:url(${p=>p.img}) center/cover;height:240px;color:#fff;\r\n//   display:flex;align-items:center;justify-content:center;font-size:2.2rem;font-weight:800;`;\r\n// const Filters = styled.div`background:#fff;padding:1rem 1.5rem;box-shadow:0 4px 12px rgba(0,0,0,.12);\r\n//   border-radius:14px;display:flex;gap:2rem;align-items:flex-start;width:90%;max-width:980px;\r\n//   margin:-32px auto 2rem;animation:${fadeIn}.4s ease-out;`;\r\n// const Grid   = styled.section`display:grid;gap:2rem;padding:0 2rem 3rem;max-width:1300px;margin:0 auto;\r\n//   grid-template-columns:repeat(auto-fit,minmax(280px,1fr));animation:${fadeIn}.5s ease-out;`;\r\n// const Card   = styled.div`border-radius:16px;overflow:hidden;box-shadow:0 6px 16px rgba(0,0,0,.12);background:#fff;`; \r\n// const Img    = styled.img`width:100%;height:150px;object-fit:cover;`;\r\n// const CBody  = styled.div`padding:1rem;display:flex;flex-direction:column;gap:.4rem;`;\r\n// const Price  = styled.span`font-weight:700;font-size:1.05rem;color:#175dff;`;\r\n\r\n// /* helpers */\r\n// const textDark = \"#003b70\";\r\n// const diffDays = (a,b)=>Math.max(1, Math.round((b-a)/(1000*3600*24)));\r\n\r\n// export default function CountryPage(){\r\n//   const { code }=useParams();\r\n//   const [range,setRange]=useState([{startDate:new Date(),endDate:new Date(),key:\"sel\"}]);\r\n//   const [hotels,setHotels]=useState([]);   // raw API arrays\r\n//   const [flights,setFlights]=useState([]);\r\n//   const [events,setEvents]=useState([]);\r\n\r\n//   /* load listings once */\r\n//   useEffect(()=>{\r\n//     const load=async()=>{\r\n//       const [h,f,e]=await Promise.all([\r\n//         axios.get(\"/api/listings/hotels\"),\r\n//         axios.get(\"/api/listings/flights\"),\r\n//         axios.get(\"/api/listings/events\")\r\n//       ]);\r\n//       setHotels(h.data);setFlights(f.data);setEvents(e.data);\r\n//     };\r\n//     load();\r\n//   },[]);\r\n\r\n//   /* memo‑create packages every time data or range changes */\r\n//   const packages = useMemo(()=>{\r\n//     if(!hotels.length||!flights.length||!events.length) return [];\r\n//     const from=range[0].startDate, to=range[0].endDate;\r\n//     const nights = diffDays(from,to);\r\n\r\n//     const hFilt = hotels.filter(h=>h.country===code && new Date(h.availableFrom)<=from && new Date(h.availableTo)>=to);\r\n//     const fFilt = flights.filter(f=>f.country===code && new Date(f.departDate)>=from && new Date(f.returnDate)<=to);\r\n//     const eFilt = events.filter(ev=>ev.country===code && new Date(ev.eventDate)>=from && new Date(ev.eventDate)<=to);\r\n\r\n//     const out=[];\r\n//     hFilt.forEach(h=>{\r\n//       fFilt.forEach(f=>{\r\n//         eFilt.forEach(ev=>{\r\n//           out.push({\r\n//             id:`${h.id}-${f.id}-${ev.id}`,\r\n//             hotel:h,flight:f,event:ev,\r\n//             nights,total:nights*h.pricePerNight + f.price + ev.price,\r\n//             thumb:h.photoUrl||f.photoUrl||ev.photoUrl||\"https://via.placeholder.com/400x250\"\r\n//           });\r\n//         });\r\n//       });\r\n//     });\r\n//     return out.sort((a,b)=>a.total-b.total).slice(0,12);\r\n//   },[code,hotels,flights,events,range]);\r\n\r\n//   /* hero fallback photo */\r\n//   const heroImg=`https://images.unsplash.com/1600x500/?${code}&auto=format`; // you can override\r\n\r\n//   return(\r\n//     <>\r\n//       <Hero img={heroImg}>{code}</Hero>\r\n\r\n//       <Filters>\r\n//         <div>\r\n//           <strong>Dates</strong>\r\n//           <DateRange ranges={range}\r\n//             onChange={i=>setRange([i.selection])}\r\n//             moveRangeOnFirstSelection={false}\r\n//             rangeColors={[\"#175dff\"]} editableDateInputs\r\n//           />\r\n//         </div>\r\n//         {/* space for future price slider / category checkboxes */}\r\n//       </Filters>\r\n\r\n//       <Grid>\r\n//         {packages.map(p=>(\r\n//           <Card key={p.id}>\r\n//             <Img src={p.thumb} alt=\"pkg\"/>\r\n//             <CBody>\r\n//               <div><strong>{p.hotel.name}</strong> + flight + event</div>\r\n//               <div>{p.nights} nights · {p.hotel.city}</div>\r\n//               <div>Flight: {p.flight.airline}</div>\r\n//               <div>Event: {p.event.title}</div>\r\n//               <Price>€ {p.total.toFixed(0)}</Price>\r\n//             </CBody>\r\n//           </Card>\r\n//         ))}\r\n//         {!packages.length && <p style={{gridColumn:\"1/-1\",color:textDark}}>No matching packages. Try different dates.</p>}\r\n//       </Grid>\r\n//     </>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}